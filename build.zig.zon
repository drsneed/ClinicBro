.{
    .name = "testserver.live",
    // This is a [Semantic Version](https://semver.org/).
    // In a future version of Zig it will be used for package deduplication.
    .version = "0.0.0",

    // This field is optional.
    // This is currently advisory only; Zig does not yet do anything
    // with this value.
    //.minimum_zig_version = "0.11.0",

    // This field is optional.
    // Each dependency must either provide a `url` and `hash`, or a `path`.
    // `zig build --fetch` can be used to fetch all dependencies of a package, recursively.
    // Once all dependencies are fetched, `zig build` no longer requires
    // internet connectivity.
    .dependencies = .{ .jetzig = .{
        .url = "https://github.com/jetzig-framework/jetzig/archive/main.tar.gz",
        .hash = "122088840b1a6c1472fbc4d9f60a3e1f20dfc0393f8e5093d936a0a95c97f241a907",
    }, .zqlite = .{
        .url = "git+https://github.com/karlseguin/zqlite.zig#master",
        .hash = "12205e11bd7e60af91e3fe96b7fd90c2bfd73bdae778dbee9d243a5027e06fc3c101",
    // }, .zdt = .{
    //     .url = "https://codeberg.org/FObersteiner/zdt/archive/main.tar.gz",
    //     .hash = "1220888b19e66e7f259effe27893a6953379f1922278722011d01ef23b392d2bd1d6",
    // } 
    }},
    .paths = .{
        // This makes *all* files, recursively, included in this package. It is generally
        // better to explicitly list the files and directories instead, to insure that
        // fetching from tarballs, file system paths, and version control all result
        // in the same contents hash.
        "",
        // For example...
        //"build.zig",
        //"build.zig.zon",
        //"src",
        //"LICENSE",
        //"README.md",
    },
}
