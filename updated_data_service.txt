import 'dart:convert';
import 'package:http/http.dart' as http;

class User {
  final int id;
  final bool active;
  final String name;
  final int color;
  final bool seesPatients;
  final DateTime dateCreated;
  final DateTime dateUpdated;
  final String createdBy;
  final String updatedBy;

  User({
    required this.id,
    required this.active,
    required this.name,
    required this.color,
    required this.seesPatients,
    required this.dateCreated,
    required this.dateUpdated,
    required this.createdBy,
    required this.updatedBy,
  });

  factory User.fromJson(Map<String, dynamic> json) {
    return User(
      id: json['id'],
      active: json['active'],
      name: json['name'],
      color: json['color'],
      seesPatients: json['sees_patients'],
      dateCreated: DateTime.parse(json['date_created']),
      dateUpdated: DateTime.parse(json['date_updated']),
      createdBy: json['created_by'],
      updatedBy: json['updated_by'],
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'active': active,
      'name': name,
      'color': color,
      'sees_patients': seesPatients,
      'date_created': dateCreated.toIso8601String(),
      'date_updated': dateUpdated.toIso8601String(),
      'created_by': createdBy,
      'updated_by': updatedBy,
    };
  }
}

class DataService {
  final String baseUrl;
  DataService(this.baseUrl);

  Future<String?> authenticateUser(String username, String password) async {
    final url = Uri.parse('$baseUrl/client-api/authenticate.json');
    final response = await http.post(
      url,
      headers: {'Content-Type': 'application/json'},
      body: jsonEncode({
        'name': username,
        'password': password,
      }),
    );
    if (response.statusCode == 200) {
      if (response.body.isNotEmpty) {
        final data = jsonDecode(response.body);
        return data['token']; // Adjust based on your response structure
      }
      return null;
    } else {
      // Handle errors or throw exceptions
      return null;
    }
  }

  // Create a new user
  Future<User?> createUser(User user) async {
    final url = Uri.parse('$baseUrl/client-api/users.json');
    final response = await http.post(
      url,
      headers: {'Content-Type': 'application/json'},
      body: jsonEncode(user.toJson()),
    );
    if (response.statusCode == 201) {
      return User.fromJson(jsonDecode(response.body));
    } else {
      // Handle errors or throw exceptions
      return null;
    }
  }

  // Read a user by ID
  Future<User?> getUser(int id) async {
    final url = Uri.parse('$baseUrl/client-api/users/$id.json');
    final response = await http.get(url);
    if (response.statusCode == 200) {
      return User.fromJson(jsonDecode(response.body));
    } else {
      // Handle errors or throw exceptions
      return null;
    }
  }

  // Update a user
  Future<User?> updateUser(User user) async {
    final url = Uri.parse('$baseUrl/client-api/users/${user.id}.json');
    final response = await http.put(
      url,
      headers: {'Content-Type': 'application/json'},
      body: jsonEncode(user.toJson()),
    );
    if (response.statusCode == 200) {
      return User.fromJson(jsonDecode(response.body));
    } else {
      // Handle errors or throw exceptions
      return null;
    }
  }

  // Delete a user
  Future<bool> deleteUser(int id) async {
    final url = Uri.parse('$baseUrl/client-api/users/$id.json');
    final response = await http.delete(url);
    return response.statusCode == 204;
  }

  // Get all users
  Future<List<User>> getAllUsers() async {
    final url = Uri.parse('$baseUrl/client-api/users.json');
    final response = await http.get(url);
    if (response.statusCode == 200) {
      List<dynamic> usersJson = jsonDecode(response.body);
      return usersJson.map((json) => User.fromJson(json)).toList();
    } else {
      // Handle errors or throw exceptions
      return [];
    }
  }
}